// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bytesT

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LibraryServiceClient is the client API for LibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryServiceClient interface {
	UploadBook(ctx context.Context, opts ...grpc.CallOption) (LibraryService_UploadBookClient, error)
	DistributeBook(ctx context.Context, in *DistributeBookRequest, opts ...grpc.CallOption) (*DistributeBookResponse, error)
	RicartNAgrawala(ctx context.Context, opts ...grpc.CallOption) (LibraryService_RicartNAgrawalaClient, error)
	LogMod(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	GetChunkLoc(ctx context.Context, in *GetChunkLocRequest, opts ...grpc.CallOption) (*GetChunkLocResponse, error)
	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error)
}

type libraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryServiceClient(cc grpc.ClientConnInterface) LibraryServiceClient {
	return &libraryServiceClient{cc}
}

func (c *libraryServiceClient) UploadBook(ctx context.Context, opts ...grpc.CallOption) (LibraryService_UploadBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LibraryService_serviceDesc.Streams[0], "/bytesT.LibraryService/UploadBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &libraryServiceUploadBookClient{stream}
	return x, nil
}

type LibraryService_UploadBookClient interface {
	Send(*UploadBookRequest) error
	CloseAndRecv() (*UploadBookResponse, error)
	grpc.ClientStream
}

type libraryServiceUploadBookClient struct {
	grpc.ClientStream
}

func (x *libraryServiceUploadBookClient) Send(m *UploadBookRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *libraryServiceUploadBookClient) CloseAndRecv() (*UploadBookResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *libraryServiceClient) DistributeBook(ctx context.Context, in *DistributeBookRequest, opts ...grpc.CallOption) (*DistributeBookResponse, error) {
	out := new(DistributeBookResponse)
	err := c.cc.Invoke(ctx, "/bytesT.LibraryService/DistributeBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) RicartNAgrawala(ctx context.Context, opts ...grpc.CallOption) (LibraryService_RicartNAgrawalaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LibraryService_serviceDesc.Streams[1], "/bytesT.LibraryService/RicartNAgrawala", opts...)
	if err != nil {
		return nil, err
	}
	x := &libraryServiceRicartNAgrawalaClient{stream}
	return x, nil
}

type LibraryService_RicartNAgrawalaClient interface {
	Send(*RnARequest) error
	CloseAndRecv() (*RnAResponse, error)
	grpc.ClientStream
}

type libraryServiceRicartNAgrawalaClient struct {
	grpc.ClientStream
}

func (x *libraryServiceRicartNAgrawalaClient) Send(m *RnARequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *libraryServiceRicartNAgrawalaClient) CloseAndRecv() (*RnAResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RnAResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *libraryServiceClient) LogMod(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/bytesT.LibraryService/LogMod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetChunkLoc(ctx context.Context, in *GetChunkLocRequest, opts ...grpc.CallOption) (*GetChunkLocResponse, error) {
	out := new(GetChunkLocResponse)
	err := c.cc.Invoke(ctx, "/bytesT.LibraryService/GetChunkLoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error) {
	out := new(GetChunkResponse)
	err := c.cc.Invoke(ctx, "/bytesT.LibraryService/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibraryServiceServer is the server API for LibraryService service.
// All implementations must embed UnimplementedLibraryServiceServer
// for forward compatibility
type LibraryServiceServer interface {
	UploadBook(LibraryService_UploadBookServer) error
	DistributeBook(context.Context, *DistributeBookRequest) (*DistributeBookResponse, error)
	RicartNAgrawala(LibraryService_RicartNAgrawalaServer) error
	LogMod(context.Context, *LogRequest) (*LogResponse, error)
	GetChunkLoc(context.Context, *GetChunkLocRequest) (*GetChunkLocResponse, error)
	GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error)
	mustEmbedUnimplementedLibraryServiceServer()
}

// UnimplementedLibraryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibraryServiceServer struct {
}

func (UnimplementedLibraryServiceServer) UploadBook(LibraryService_UploadBookServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBook not implemented")
}
func (UnimplementedLibraryServiceServer) DistributeBook(context.Context, *DistributeBookRequest) (*DistributeBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeBook not implemented")
}
func (UnimplementedLibraryServiceServer) RicartNAgrawala(LibraryService_RicartNAgrawalaServer) error {
	return status.Errorf(codes.Unimplemented, "method RicartNAgrawala not implemented")
}
func (UnimplementedLibraryServiceServer) LogMod(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogMod not implemented")
}
func (UnimplementedLibraryServiceServer) GetChunkLoc(context.Context, *GetChunkLocRequest) (*GetChunkLocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkLoc not implemented")
}
func (UnimplementedLibraryServiceServer) GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedLibraryServiceServer) mustEmbedUnimplementedLibraryServiceServer() {}

// UnsafeLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServiceServer will
// result in compilation errors.
type UnsafeLibraryServiceServer interface {
	mustEmbedUnimplementedLibraryServiceServer()
}

func RegisterLibraryServiceServer(s grpc.ServiceRegistrar, srv LibraryServiceServer) {
	s.RegisterService(&_LibraryService_serviceDesc, srv)
}

func _LibraryService_UploadBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibraryServiceServer).UploadBook(&libraryServiceUploadBookServer{stream})
}

type LibraryService_UploadBookServer interface {
	SendAndClose(*UploadBookResponse) error
	Recv() (*UploadBookRequest, error)
	grpc.ServerStream
}

type libraryServiceUploadBookServer struct {
	grpc.ServerStream
}

func (x *libraryServiceUploadBookServer) SendAndClose(m *UploadBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *libraryServiceUploadBookServer) Recv() (*UploadBookRequest, error) {
	m := new(UploadBookRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibraryService_DistributeBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).DistributeBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytesT.LibraryService/DistributeBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).DistributeBook(ctx, req.(*DistributeBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_RicartNAgrawala_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibraryServiceServer).RicartNAgrawala(&libraryServiceRicartNAgrawalaServer{stream})
}

type LibraryService_RicartNAgrawalaServer interface {
	SendAndClose(*RnAResponse) error
	Recv() (*RnARequest, error)
	grpc.ServerStream
}

type libraryServiceRicartNAgrawalaServer struct {
	grpc.ServerStream
}

func (x *libraryServiceRicartNAgrawalaServer) SendAndClose(m *RnAResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *libraryServiceRicartNAgrawalaServer) Recv() (*RnARequest, error) {
	m := new(RnARequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibraryService_LogMod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).LogMod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytesT.LibraryService/LogMod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).LogMod(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetChunkLoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkLocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetChunkLoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytesT.LibraryService/GetChunkLoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetChunkLoc(ctx, req.(*GetChunkLocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytesT.LibraryService/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetChunk(ctx, req.(*GetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LibraryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bytesT.LibraryService",
	HandlerType: (*LibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributeBook",
			Handler:    _LibraryService_DistributeBook_Handler,
		},
		{
			MethodName: "LogMod",
			Handler:    _LibraryService_LogMod_Handler,
		},
		{
			MethodName: "GetChunkLoc",
			Handler:    _LibraryService_GetChunkLoc_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _LibraryService_GetChunk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBook",
			Handler:       _LibraryService_UploadBook_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RicartNAgrawala",
			Handler:       _LibraryService_RicartNAgrawala_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "M1/main/bookStore.proto",
}
